<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Disney Scribble - Room {{ roomId }}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
      body { font-family: 'Poppins', sans-serif; }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-indigo-200 via-pink-100 to-white flex items-center justify-center">
  <div class="w-full max-w-8xl mx-auto py-10 px-4 md:px-10 rounded-3xl shadow-2xl bg-white/80 backdrop-blur-lg animate__animated animate__fadeIn">
    <!-- Header -->
    <div class="flex justify-between items-center mb-10 p-6 rounded-2xl bg-gradient-to-r from-indigo-400/80 to-pink-400/80 shadow-lg animate__animated animate__fadeInDown">
      <div class="flex flex-col gap-2">
        <div class="flex items-center gap-4">
          <span class="text-2xl font-extrabold bg-clip-text text-transparent bg-gradient-to-r from-indigo-700 to-pink-600 drop-shadow-lg tracking-wide">
            Disney Scribble
          </span>
          <span class="bg-white/70 px-4 py-1 rounded-lg text-base font-semibold shadow text-indigo-600">Room: {{ roomId }}</span>
        </div>
        <div class="flex items-center gap-4 mt-1">
          <span id="gameStatus" class="text-lg font-medium text-gray-700">En attente...</span>
          <span id="roundInfo" class="text-lg font-semibold text-indigo-700"></span>
        </div>
      </div>
      <div class="flex items-center gap-4">
        <div class="hidden md:block">
          <div class="rounded-xl bg-gradient-to-r from-indigo-100 to-pink-100 px-5 py-2 text-indigo-700 font-semibold shadow text-lg">
            {{ playerName }}
          </div>
        </div>
        <div class="timer-container" id="timerContainer" style="display: none;">
          <span id="timer" class="timer text-lg font-bold text-pink-600"></span>
        </div>
      </div>
    </div>

    <div class="flex flex-col md:flex-row gap-8">
      <!-- Liste des joueurs à gauche -->
      <div class="w-full md:w-[180px] flex flex-col gap-6 order-1 md:order-none">
        <div class="rounded-2xl bg-white/80 shadow-lg p-5 animate__animated animate__fadeIn">
          <h3 class="text-xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-indigo-500 to-pink-500">
            Joueurs
          </h3>
          <ul id="playersList" class="flex flex-col gap-2"></ul>
        </div>
      </div>

      <div class="flex-[3_3_0%] basis-0 min-w-0 flex flex-col gap-6 order-2" style="flex-basis:0;flex-grow:3;max-width:75%">
        <!-- Mot à dessiner -->
        <div id="wordDisplay" class="text-center text-xl font-bold bg-gradient-to-r from-indigo-500 to-pink-500 bg-clip-text text-transparent animate__animated animate__fadeInDown py-2 tracking-wider shadow">
          En attente du jeu...
        </div>

        <!-- Canvas agrandi -->
        <div class="relative rounded-2xl shadow-xl bg-white overflow-hidden animate__animated animate__fadeInUp min-h-[600px]">
        <canvas id="drawingCanvas" class="w-full h-full max-w-[1200px] max-h-[600px]"></canvas>
          <div id="canvasBlur" class="absolute inset-0 flex items-center justify-center bg-white/90 z-10 rounded-2xl text-center text-xl font-bold text-indigo-600 animate__animated animate__fadeIn hidden">
            Manche terminée
          </div>
        </div>

        <!-- Outils -->
        <div id="tools" class="flex flex-wrap items-center gap-2 p-2 rounded-lg bg-gradient-to-r from-indigo-100 to-pink-100 shadow-md animate__animated animate__fadeInUp mt-1" style="display: none;">
          <button id="clearBtn" class="tool-btn bg-red-100 text-red-700 hover:bg-red-200 rounded px-2 py-1 text-sm font-semibold shadow transition-transform duration-150 active:scale-95">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" class="inline mr-1">
              <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5zm-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5zM4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06zm6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528zM8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5z"/>
            </svg>
            Effacer
          </button>
          <button id="penBtn" class="tool-btn bg-indigo-100 text-indigo-700 hover:bg-indigo-200 rounded px-2 py-1 text-sm font-semibold shadow transition-transform duration-150 active:scale-95 active">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" class="inline mr-1">
              <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z"/>
            </svg>
            Stylo
          </button>
          <button id="eraserBtn" class="tool-btn bg-gray-100 text-gray-700 hover:bg-gray-200 rounded px-2 py-1 text-sm font-semibold shadow transition-transform duration-150 active:scale-95">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" class="inline mr-1">
              <path d="M8.086 2.207a2 2 0 0 1 2.828 0l3.879 3.879a2 2 0 0 1 0 2.828l-5.5 5.5A2 2 0 0 1 7.879 15H5.12a2 2 0 0 1-1.414-.586l-2.5-2.5a2 2 0 0 1 0-2.828l6.879-6.879zm.66 11.34L3.453 8.254 1.914 9.793a1 1 0 0 0 0 1.414l2.5 2.5a1 1 0 0 0 .707.293H7.88a1 1 0 0 0 .707-.293l.16-.16z"/>
            </svg>
            Gomme
          </button>
          <div class="flex items-center gap-2 ml-4">
            <label for="penWidth" class="text-sm font-medium text-gray-700">Épaisseur</label>
            <input id="penWidth" type="range" min="1" max="30" value="3" class="w-24">
            <span id="penWidthValue" class="text-sm text-gray-700">3</span>
          </div>
          <div class="ml-auto flex gap-1">
            <button class="color-btn w-6 h-6 rounded-full border-2 border-white shadow cursor-pointer transition-all duration-150 ring-2 ring-indigo-400" style="background:#000;" data-color="#000"></button>
            <button class="color-btn w-6 h-6 rounded-full border-2 border-white shadow cursor-pointer transition-all duration-150" style="background:#e74c3c;" data-color="#e74c3c"></button>
            <button class="color-btn w-6 h-6 rounded-full border-2 border-white shadow cursor-pointer transition-all duration-150" style="background:#3498db;" data-color="#3498db"></button>
            <button class="color-btn w-6 h-6 rounded-full border-2 border-white shadow cursor-pointer transition-all duration-150" style="background:#27ae60;" data-color="#27ae60"></button>
            <button class="color-btn w-6 h-6 rounded-full border-2 border-white shadow cursor-pointer transition-all duration-150" style="background:#f1c40f;" data-color="#f1c40f"></button>
            <button class="color-btn w-6 h-6 rounded-full border-2 border-white shadow cursor-pointer transition-all duration-150" style="background:#9b59b6;" data-color="#9b59b6"></button>
          </div>
        </div>
      </div>

      <div class="w-full md:w-[400px] flex flex-col gap-5 order-3">
        <button id="startGameBtn" class="btn btn-primary w-full py-3 rounded-xl text-lg font-bold bg-gradient-to-r from-indigo-500 to-pink-500 text-white shadow-lg hover:scale-105 transition-transform animate__animated animate__pulse animate__infinite">
          Démarrer la partie
        </button>
        <div class="rounded-2xl bg-white/80 shadow-lg p-5 animate__animated animate__fadeIn flex flex-col h-[380px]">
          <div id="chatMessages" class="flex-1 overflow-y-auto mb-2 space-y-1"></div>
          <form id="chatForm" autocomplete="off" class="flex gap-2 w-full">
            {{ csrfField() }}
            <input type="text" id="chatInput" class="flex-1 min-w-0 rounded-lg border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-400 transition" placeholder="Message ou proposition..." maxlength="50" autocomplete="off" />
            <button id="chatSendBtn" type="submit" class="flex-shrink-0 rounded-lg bg-gradient-to-r from-indigo-500 to-pink-500 text-white font-bold px-4 py-2 shadow hover:scale-105 transition-transform disabled:opacity-50 disabled:cursor-not-allowed">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16" class="inline mr-1">
                <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178z"/>
              </svg>
              Envoyer
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>

<script src="https://cdn.socket.io/4.8.1/socket.io.min.js" integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+" crossorigin="anonymous"></script>
<script>
    const roomId = '{{ roomId }}'
    const playerName = '{{ playerName }}'
    const socket = io('http://192.168.1.183:3333')
    let isCreator = false

    let isDrawing = false
    let canDraw = false
    let currentWord = ''
    let roundDuration = 60
    let timerInterval = null

    // Join room
    socket.emit('join-room', { roomId, playerName })

    // Elements
    const playersList = document.getElementById('playersList')
    const wordDisplay = document.getElementById('wordDisplay')
    const startGameBtn = document.getElementById('startGameBtn')
    const gameStatus = document.getElementById('gameStatus')
    const roundInfo = document.getElementById('roundInfo')
    const timer = document.getElementById('timer')
    const timerContainer = document.getElementById('timerContainer')
    const chatMessages = document.getElementById('chatMessages')
    const chatForm = document.getElementById('chatForm')
    const chatInput = document.getElementById('chatInput')
    const tools = document.getElementById('tools')
    const clearBtn = document.getElementById('clearBtn')
    const penBtn = document.getElementById('penBtn')
    const eraserBtn = document.getElementById('eraserBtn')
    const colorBtns = document.querySelectorAll('.color-btn')
    const canvas = document.getElementById('drawingCanvas')
    const ctx = canvas.getContext('2d')

    // Resize canvas
    function resizeCanvas() {
        // Sauvegarder le dessin actuel
        const dataUrl = canvas.toDataURL();

        // Limiter la taille maximale
        const rect = canvas.parentElement.getBoundingClientRect();
        const maxWidth = 900;
        const maxHeight = 600;
        const width = Math.min(rect.width, maxWidth);
        const height = Math.min(rect.height, maxHeight);

        canvas.width = width;
        canvas.height = height;

        // Restaurer le dessin
        const img = new window.Image();
        img.onload = function () {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(img, 0, 0, width, height);
        };
        img.src = dataUrl;
    }
    window.addEventListener('resize', resizeCanvas)
    resizeCanvas()

    let penColor = '#000'
    let penWidth = 3
    let erasing = false

    let drawing = false
    let lastX = 0, lastY = 0

    function startDraw(e) {
        if (!canDraw) return;
        drawing = true;
        [lastX, lastY] = getPos(e);
    }

    function draw(e) {
      if (!drawing || !canDraw) return;
      const [x, y] = getPos(e);
      ctx.strokeStyle = erasing ? '#fff' : penColor;
      ctx.lineWidth = penWidth; // Utilisé pour stylo ET gomme
      ctx.lineCap = 'round';
      ctx.beginPath();
      ctx.moveTo(lastX, lastY);
      ctx.lineTo(x, y);
      ctx.stroke();
      socket.emit('drawing', { roomId, drawingData: { x, y, lastX, lastY, color: ctx.strokeStyle, width: ctx.lineWidth } });
      [lastX, lastY] = [x, y];
    }

    function getPos(e) {
        const rect = canvas.getBoundingClientRect();
        let clientX, clientY;
        if (e.touches && e.touches.length > 0) {
            clientX = e.touches[0].clientX;
            clientY = e.touches[0].clientY;
        } else {
            clientX = e.clientX;
            clientY = e.clientY;
        }
        const x = (clientX - rect.left) * (canvas.width / rect.width);
        const y = (clientY - rect.top) * (canvas.height / rect.height);
        return [x, y];
    }

    function endDraw() {
        drawing = false
    }

    // Événements souris/tactile
    canvas.addEventListener('mousedown', startDraw)
    canvas.addEventListener('mousemove', draw)
    canvas.addEventListener('mouseup', endDraw)
    canvas.addEventListener('mouseleave', endDraw)
    canvas.addEventListener('touchstart', startDraw)
    canvas.addEventListener('touchmove', draw)
    canvas.addEventListener('touchend', endDraw)

    // Receive drawing
    socket.on('drawing', data => {
        ctx.strokeStyle = data.color
        ctx.lineWidth = data.width
        ctx.lineCap = 'round'
        ctx.beginPath()
        ctx.moveTo(data.lastX, data.lastY)
        ctx.lineTo(data.x, data.y)
        ctx.stroke()
    })

    clearBtn.onclick = () => {
        ctx.clearRect(0, 0, canvas.width, canvas.height)
        socket.emit('clear-canvas', roomId)
    }
    socket.on('clear-canvas', () => {
        ctx.clearRect(0, 0, canvas.width, canvas.height)
    })
    canvas.style.cursor = 'crosshair'

    penBtn.onclick = () => {
        erasing = false
        penBtn.classList.add('active')
        eraserBtn.classList.remove('active')
        canvas.style.cursor = 'crosshair'
    }
    const penWidthInput = document.getElementById('penWidth');
    const penWidthValue = document.getElementById('penWidthValue');

    penWidthInput.oninput = () => {
      penWidth = parseInt(penWidthInput.value, 10);
      penWidthValue.textContent = penWidth;
    };

    eraserBtn.onclick = () => {
        erasing = true
        eraserBtn.classList.add('active')
        penBtn.classList.remove('active')
        canvas.style.cursor = 'cell'
    }
    colorBtns.forEach(btn => {
        btn.onclick = () => {
            penColor = btn.dataset.color
            colorBtns.forEach(b => b.classList.remove('selected'))
            btn.classList.add('selected')
        }
    })
    penBtn.classList.add('active')
    colorBtns[0].classList.add('selected')

    // Players list
    socket.on('players-updated', players => {
        playersList.innerHTML = ''
        let foundCreator = false
        players.forEach(p => {
            const li = document.createElement('li')
            li.className = 'player-item'
            if (p.isDrawing) li.classList.add('player-drawer')
            li.innerHTML = `
                <div>${p.name} ${p.isDrawing ? '✏️' : ''} ${p.isCreator ? '👑' : ''}</div>
                <div class="score">${p.score} pts</div>
            `
            playersList.appendChild(li)

            if (p.isCreator && p.id === socket.id) {
                foundCreator = true
            }
        })
        isCreator = foundCreator
        startGameBtn.style.display = isCreator ? '' : 'none'
    })

    // Room info
    socket.on('room-info', info => {
        gameStatus.textContent = info.gameStarted ? 'En cours' : 'En attente...'
        roundInfo.textContent = info.gameStarted ? `Manche ${info.round} / ${info.maxRounds}` : ''
        if (info.gameStarted) startGameBtn.style.display = 'none'
        else if (isCreator) startGameBtn.style.display = ''
    })

    // Start game
    startGameBtn.onclick = () => {
        socket.emit('start-game', roomId)
        startGameBtn.classList.remove('animate__pulse', 'animate__infinite')
    }

    // Round start
    socket.on('round-start', data => {
        stopTimer()
        gameStatus.textContent = 'En cours'
        roundInfo.textContent = `Manche ${data.round}`
        roundDuration = data.duration || 60
        if (data.isDrawing) {
            canDraw = true
            tools.style.display = 'flex'
            wordDisplay.textContent = data.word
        } else {
            canDraw = false
            tools.style.display = 'none'
            wordDisplay.textContent = '_ '.repeat(data.word.length)
        }
        startTimer()
    })

    socket.on('round-end', data => {
        stopTimer()
        wordDisplay.textContent = `Mot : ${data.word}`
        canDraw = false
        tools.style.display = 'none'
        const blur = document.getElementById('canvasBlur')
        let scores = `
            <div class="animate__animated animate__zoomIn">
                <h2 class="text-xl font-bold mb-4">Manche terminée</h2>
                <p class="text-lg mb-4">Mot : <b>${data.word}</b></p>
                <div class="mt-4">
                    <h3 class="font-bold mb-2">Scores de la manche</h3>
                    <div class="flex flex-col gap-2">
        `
        data.scores.forEach(s => {
            scores += `<div class="flex justify-between"><span>${s.name}</span><span class="font-bold">${s.score} pts</span></div>`
        })
        scores += `
                    </div>
                </div>
            </div>
        `
        blur.innerHTML = scores
        blur.style.display = 'flex'
        setTimeout(() => {
            blur.style.display = 'none'
        }, 5000)
    })

    // Game end
    socket.on('game-end', data => {
        stopTimer()
        const blur = document.getElementById('canvasBlur')
        let message = `
            <div class="animate__animated animate__zoomIn">
                <h2 class="text-2xl font-bold mb-4">Fin de la partie !</h2>
                <div class="mb-6 p-3 bg-gradient-to-r from-indigo-100 to-pink-100 rounded-lg">
                    <p class="font-medium">Gagnant : <b>${data.winner.name}</b></p>
                    <p class="text-xl font-bold text-pink-600">${data.winner.score} pts</p>
                </div>
                <div class="mt-4">
                    <h3 class="font-bold mb-2">Scores finaux</h3>
                    <div class="flex flex-col gap-2">
        `
        data.scores.forEach((s, i) => {
            message += `<div class="flex justify-between items-center ${i === 0 ? 'text-pink-600 font-bold' : ''}">
                <span>${i + 1}. ${s.name}</span>
                <span>${s.score} pts</span>
            </div>`
        })
        message += `
                    </div>
                </div>
            </div>
        `
        blur.innerHTML = message
        blur.style.display = 'flex'

        wordDisplay.textContent = 'En attente du jeu...'
        gameStatus.textContent = 'En attente...'
        if (isCreator) {
            startGameBtn.style.display = ''
            startGameBtn.classList.add('animate__pulse', 'animate__infinite')
        }
    })

    // Correct guess
    socket.on('correct-guess', data => {
        addChatMessage(`${data.playerName} a trouvé le mot ! (+${data.points} pts)`, 'system')
    })

    // Chat
    chatForm.onsubmit = e => {
        e.preventDefault()
        const msg = chatInput.value.trim()
        if (!msg) return
        if (!canDraw) {
            socket.emit('guess', { roomId, guess: msg })
        } else {
            socket.emit('chat-message', { roomId, message: msg })
        }
        chatInput.value = ''
    }

    socket.on('chat-message', data => {
        addChatMessage(`${data.playerName} : ${data.message}`, data.isGuess ? 'guess' : 'normal')
    })

    function addChatMessage(msg, type) {
        const div = document.createElement('div')
        div.textContent = msg
        div.className = 'message'

        if (type === 'system') {
            div.classList.add('system')
        } else if (type === 'guess') {
            div.style.fontStyle = 'italic'
        }

        chatMessages.appendChild(div)
        chatMessages.scrollTop = chatMessages.scrollHeight
    }

    // Timer
    function startTimer() {
        stopTimer();
        let t = roundDuration;
        timer.textContent = `${t}s`;
        timerContainer.style.display = 'flex';
        timerInterval = setInterval(() => {
            t--;
            timer.textContent = `${t}s`;
            if (t <= 10) {
                timer.classList.add('animate__animated', 'animate__heartBeat');
                timer.style.color = '#e74c3c';
            }
            if (t <= 0) {
                stopTimer();
            }
        }, 1000);
    }

    function stopTimer() {
        if (timerInterval) {
            clearInterval(timerInterval)
            timerInterval = null
        }
        timer.textContent = ''
        timer.classList.remove('animate__animated', 'animate__heartBeat');
        timer.style.color = '';
        timerContainer.style.display = 'none';
    }
</script>
</body>
</html>
